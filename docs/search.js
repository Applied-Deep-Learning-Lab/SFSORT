window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "SFSORT.SFSORT", "modulename": "SFSORT.SFSORT", "kind": "module", "doc": "<p>This module contains the SFSORT object detection tracker implementation.</p>\n\n<p>By introducing a novel cost function called the Bounding Box Similarity Index,\nthis project eliminates the Kalman Filter, leading to reduced computational requirements.</p>\n\n<h6 id=\"quickstart\">Quickstart</h6>\n\n<p>There are two files available for a quickstart with this tracker:</p>\n\n<ul>\n<li><p>through ONNX model in form of YOLOv7 <a href=\"https://github.com/Applied-Deep-Learning-Lab/SFSORT/blob/main/yolov7_onnxruntime_sfsort.py\">here</a>.</p></li>\n<li><p>for any model in Ultralytics framework <a href=\"https://github.com/Applied-Deep-Learning-Lab/SFSORT/blob/main/ultralytics_sfsort.py\">here</a>.</p></li>\n</ul>\n\n<h6 id=\"usage\">Usage</h6>\n\n<p>Simply import the module in your Python code:</p>\n\n<pre><code>from SFSORT import SFSORT\n</code></pre>\n\n<p>Initialize the tracker:</p>\n\n<pre><code># Organize tracker arguments into standard format\ntracker_arguments = {\"dynamic_tuning\": True, \"cth\": 0.7,\n                    \"high_th\": 0.7, \"high_th_m\": 0.1,\n                    \"match_th_first\": 0.6, \"match_th_first_m\": 0.05,\n                    \"match_th_second\": 0.4, \"low_th\": 0.2,\n                    \"new_track_th\": 0.5, \"new_track_th_m\": 0.1,\n                    \"marginal_timeout\": (7 * fps // 10),\n                    \"central_timeout\": fps,\n                    \"horizontal_margin\": width // 10,\n                    \"vertical_margin\": height // 10,\n                    \"frame_width\": width,\n                    \"frame_height\": height,}\n# Instantiate a tracker\ntracker = SFSORT(tracker_arguments)\n</code></pre>\n\n<p>The parameters for the tracker are as follows:</p>\n\n<ul>\n<li><code>cth</code>                 Threshold that determines the number of set members whose detection score exceeds this value</li>\n<li><code>high_th</code>             Minimum score for high-score detections</li>\n<li><strong><code>low_th</code></strong>          Minimum score for intermediate-score detections</li>\n<li><code>match_th_first</code>      Maximum allowable cost in the first association module</li>\n<li><strong><code>match_th_second</code></strong> Maximum allowable cost in the second association module</li>\n<li><code>new_track_th</code>        Minimum score for detections identified as new tracks</li>\n<li><code>horizontal_margin</code>   Margin to determine the horizontal boundaries of central areas</li>\n<li><code>vertical_margin</code>     Margin to determine the vertical boundaries of central areas</li>\n<li><code>central_timeout</code>     Time-out for tracks lost at central areas</li>\n<li><code>marginal_timeout</code>    Time-out for tracks lost at marginal areas</li>\n</ul>\n\n<p>Parameters in bold are the most important and should be modified based on the detector being used.\nFor example, YOLOv10 might give low scores to small objects while Unet doesn't and thus <code>low_th</code>\nshould be set lower for the former.\nParameters with <code>_m</code> suffix are margins that are being used with <code>dynamic_tuning</code> key. Basically if\nyour detector is being used in an environment with a lot of occlusions/disocclusions/overlap it might\nbe better to leave this parameter turned on. It should dynamically change threshold values when the\ndetector is confused in crowded environments or rapidly moving objects. In other cases you can turn it off.</p>\n\n<p>After that simply pass three arrays, containing bounding boxes, confidence and classes values.</p>\n\n<pre><code># Update the tracker with the latest detections\ntracks = tracker.update(\n    prediction_results.xyxy,\n    prediction_results.conf,\n    prediction_results.cls)\n</code></pre>\n\n<p>As a response you will get an array with track IDs and your input values. Be aware that all values are in <code>np.float32</code>.</p>\n\n<pre><code># Extract tracking data from the tracker\nbbox_list      = tracks[:, 0]\ntrack_id_list  = tracks[:, 1]\ncls_id_list    = tracks[:, 2]\nscores_list    = tracks[:, 3]\n</code></pre>\n"}, {"fullname": "SFSORT.SFSORT.use_lap", "modulename": "SFSORT.SFSORT", "qualname": "use_lap", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "SFSORT.SFSORT.DotAccess", "modulename": "SFSORT.SFSORT", "qualname": "DotAccess", "kind": "class", "doc": "<p>Provides dot notation access to dictionary attributes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dict</strong> (dict):\nThe dictionary to access with dot notation.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">DotAccess</span><span class=\"p\">({</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"go\">2</span>\n</code></pre>\n</div>\n", "bases": "builtins.dict"}, {"fullname": "SFSORT.SFSORT.TrackState", "modulename": "SFSORT.SFSORT", "qualname": "TrackState", "kind": "class", "doc": "<p>Enumeration of possible states of a track.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>Active</strong> (int):\nThe track is active.</li>\n<li><strong>Lost_Central</strong> (int):\nThe track is lost in the central region.</li>\n<li><strong>Lost_Marginal</strong> (int):\nThe track is lost in the marginal region.</li>\n</ul>\n"}, {"fullname": "SFSORT.SFSORT.TrackState.Active", "modulename": "SFSORT.SFSORT", "qualname": "TrackState.Active", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "SFSORT.SFSORT.TrackState.Lost_Central", "modulename": "SFSORT.SFSORT", "qualname": "TrackState.Lost_Central", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "SFSORT.SFSORT.TrackState.Lost_Marginal", "modulename": "SFSORT.SFSORT", "qualname": "TrackState.Lost_Marginal", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "SFSORT.SFSORT.Track", "modulename": "SFSORT.SFSORT", "qualname": "Track", "kind": "class", "doc": "<p>Handles basic track attributes and operations.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bbox</strong> (array_like):\nThe bounding box of the track.</li>\n<li><strong>frame_id</strong> (int):\nThe frame ID of the track.</li>\n<li><strong>track_id</strong> (int):\nThe track ID.</li>\n<li><strong>cls_id</strong> (int):\nThe class ID of the track.</li>\n<li><strong>score</strong> (float):\nThe score of the track.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>track_id</strong> (int):\nThe track ID.</li>\n<li><strong>bbox</strong> (array_like):\nThe bounding box of the track.</li>\n<li><strong>cls_id</strong> (int):\nThe class ID of the track.</li>\n<li><strong>score</strong> (float):\nThe score of the track.</li>\n<li><strong>state</strong> (int):\nThe state of the track (active, lost central, or lost marginal).</li>\n<li><strong>last_frame</strong> (int):\nThe last frame ID of the track.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">track</span> <span class=\"o\">=</span> <span class=\"n\">Track</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">bbox</span>\n<span class=\"go\">[5, 6, 7, 8]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">score</span>\n<span class=\"go\">0.8</span>\n</code></pre>\n</div>\n"}, {"fullname": "SFSORT.SFSORT.Track.__init__", "modulename": "SFSORT.SFSORT", "qualname": "Track.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bbox</span>, </span><span class=\"param\"><span class=\"n\">frame_id</span>, </span><span class=\"param\"><span class=\"n\">track_id</span>, </span><span class=\"param\"><span class=\"n\">cls_id</span>, </span><span class=\"param\"><span class=\"n\">score</span></span>)</span>"}, {"fullname": "SFSORT.SFSORT.Track.track_id", "modulename": "SFSORT.SFSORT", "qualname": "Track.track_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "SFSORT.SFSORT.Track.state", "modulename": "SFSORT.SFSORT", "qualname": "Track.state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "SFSORT.SFSORT.Track.update", "modulename": "SFSORT.SFSORT", "qualname": "Track.update", "kind": "function", "doc": "<p>Updates a matched track.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bbox</strong> (array_like):\nThe new bounding box of the track.</li>\n<li><strong>frame_id</strong> (int):\nThe new frame ID.</li>\n<li><strong>cls_id</strong> (int):\nThe new class ID.</li>\n<li><strong>score</strong> (float):\nThe new score.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bbox</span>, </span><span class=\"param\"><span class=\"n\">frame_id</span>, </span><span class=\"param\"><span class=\"n\">cls_id</span>, </span><span class=\"param\"><span class=\"n\">score</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SFSORT.SFSORT.SFSORT", "modulename": "SFSORT.SFSORT", "qualname": "SFSORT", "kind": "class", "doc": "<p>Multi-Object Tracking System.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong> (dict):\nThe arguments for the tracker.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>frame_no</strong> (int):\nThe current frame number.</li>\n<li><strong>id_counter</strong> (int):\nThe track ID counter.</li>\n<li><strong>active_tracks</strong> (list):\nThe list of active tracks.</li>\n<li><strong>lost_tracks</strong> (list):\nThe list of lost tracks.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tracker</span> <span class=\"o\">=</span> <span class=\"n\">SFSORT</span><span class=\"p\">({</span><span class=\"s1\">&#39;low_th&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;match_th_second&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.7</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tracks</span> <span class=\"o\">=</span> <span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">([[</span><span class=\"mi\">124</span><span class=\"p\">,</span> <span class=\"mi\">112</span><span class=\"p\">,</span> <span class=\"mi\">327</span><span class=\"p\">,</span> <span class=\"mi\">450</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">234</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">261</span><span class=\"p\">,</span> <span class=\"mi\">563</span><span class=\"p\">]],</span>\n<span class=\"gp\">... </span>                        <span class=\"p\">[</span><span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                        <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bbox_list</span> <span class=\"o\">=</span> <span class=\"n\">tracks</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">track_id_list</span> <span class=\"o\">=</span> <span class=\"n\">tracks</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cls_id_list</span> <span class=\"o\">=</span> <span class=\"n\">tracks</span><span class=\"p\">[:,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scores_list</span> <span class=\"o\">=</span> <span class=\"n\">tracks</span><span class=\"p\">[:,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n"}, {"fullname": "SFSORT.SFSORT.SFSORT.__init__", "modulename": "SFSORT.SFSORT", "qualname": "SFSORT.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span>)</span>"}, {"fullname": "SFSORT.SFSORT.SFSORT.frame_no", "modulename": "SFSORT.SFSORT", "qualname": "SFSORT.frame_no", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "SFSORT.SFSORT.SFSORT.id_counter", "modulename": "SFSORT.SFSORT", "qualname": "SFSORT.id_counter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "SFSORT.SFSORT.SFSORT.active_tracks", "modulename": "SFSORT.SFSORT", "qualname": "SFSORT.active_tracks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "SFSORT.SFSORT.SFSORT.lost_tracks", "modulename": "SFSORT.SFSORT", "qualname": "SFSORT.lost_tracks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "SFSORT.SFSORT.SFSORT.update_args", "modulename": "SFSORT.SFSORT", "qualname": "SFSORT.update_args", "kind": "function", "doc": "<p>Updates tracker's arguments.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong> (dict):\nTracker parameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SFSORT.SFSORT.SFSORT.update", "modulename": "SFSORT.SFSORT", "qualname": "SFSORT.update", "kind": "function", "doc": "<p>Updates tracker with new detections.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>boxes</strong> (array_like):\nBounding boxes coordinates.</li>\n<li><strong>scores</strong> (array_like):\nNeural network confidence values.</li>\n<li><strong>class_ids</strong> (array_like):\nDetected class for an object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>result</strong> (ndarray):\nAll of the inputs plus track IDs for actively tracked objects.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boxes</span>, </span><span class=\"param\"><span class=\"n\">scores</span>, </span><span class=\"param\"><span class=\"n\">class_ids</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SFSORT.SFSORT.SFSORT.calculate_cost", "modulename": "SFSORT.SFSORT", "qualname": "SFSORT.calculate_cost", "kind": "function", "doc": "<p>Calculates the association cost based on IoU and box similarity.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tracks</strong> (list):\nThe list of Track object.</li>\n<li><strong>boxes</strong> (array_like):\nThe list of bounding boxes.</li>\n<li><strong>iou_only</strong> (bool, optional):\nWhether to calculate IoU only, by default False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>cost_matrix</strong> (ndarray):\nThe association cost matrix.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tracks</span>, </span><span class=\"param\"><span class=\"n\">boxes</span>, </span><span class=\"param\"><span class=\"n\">iou_only</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SFSORT.SFSORT.SFSORT.linear_assignment", "modulename": "SFSORT.SFSORT", "qualname": "SFSORT.linear_assignment", "kind": "function", "doc": "<p>Performs linear assignment.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cost_matrix</strong> (ndarray):\nThe association cost matrix.</li>\n<li><strong>thresh</strong> (float):\nThe threshold for the linear assignment.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>matches</strong> (ndarray):\nThe matched indices.</li>\n<li><strong>unmatched_tracks</strong> (tuple):\nThe unmatched track indices.</li>\n<li><strong>unmatched_detections</strong> (tuple):\nThe unmatched detection indices.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cost_matrix</span>, </span><span class=\"param\"><span class=\"n\">thresh</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();